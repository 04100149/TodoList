@page "/todo"
@using System.Text
@using System.Text.Json
@using TodoList.Data
@inject TodoService TodoService

<PageTitle>Todo</PageTitle>

<h1>Todo 
    <span style="font-size: 0.5em;">
        <span @onclick="@(_=>showClosed=false)" style="cursor: pointer; font-weight: @(showClosed ? "normal" : "bold");">@todos.Count(todo=>!todo.IsDone) Open</span>
        <span @onclick="@(_=>showClosed=true)" style="cursor: pointer; font-weight: @(showClosed ? "bold" : "normal");">@todos.Count(todo=>todo.IsDone) Closed</span>
    </span>
</h1>

<div>
    @foreach(var todo in todos.Where<TodoItem>(x=>!x.IsDone || showClosed).OrderBy<TodoItem, DateTime>(x=>x.TargetDate))
    {
        <TodoBox Item=@todo 
            OnClickEditCallback=@(item=>EditTodo(item))
            OnClickDoneCallback=@(item=>DoneTodo(item))
            OnClickRemoveCallback=@(item=>RemoveTodo(item))/>
    }
</div>

<div>
    <table>
        @if (editingItem != null)
        {
        <tr>
            <td align="right" valign="top">ID：</td>
            <td>@editingItem.Id</td>
        </tr>
        }
        <tr>
            <td align="right" valign="top">タイトル：</td>
            <td><input placeholder="Something todo" @bind="newTodo"/></td>
        </tr>
        <tr>
            <td align="right" valign="top">期限：</td>
            <td><input type="date" @bind="newDate"/></td>
        </tr>
        <tr>
            <td align="right" valign="top">メモ：</td>
            <td><textarea cols="30" rows="5" @bind="newMemo"/></td>
        </tr>
        <tr>
            <td colspan="2" align="right">
            @if(editingItem == null)
            {
                <button class="btn btn-primary" @onclick="AddTodo">
                    <span class="oi oi-plus" /> Add todo
                </button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="DoneEdit">
                    <span class="oi oi-check" /> Done
                </button>
                <button class="btn btn-primary" @onclick="CancelEdit">
                    <span class="oi oi-x" /> Cancel
                </button>
            }
            </td>
        </tr>
    </table>
</div>

@code {
    private List<TodoItem> todos = new();

    private bool showClosed = false;

    private int latestId = 1;
    private string? newTodo;
    private DateTime newDate = DateTime.Today.AddDays(7);
    private string newMemo;

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            TodoItem todo = new TodoItem {Id=latestId++, Title = newTodo, TargetDate = newDate, Memo=newMemo };
            newTodo = string.Empty;
            newMemo = string.Empty;
            todos.Add(todo);
            TodoService.SaveTodo(todo);
        }
    }

    private TodoItem? editingItem = null;

    private void EditTodo(TodoItem todo)
    {
        if (todo.IsDone){ return; }
        editingItem = todo;
        newTodo = todo.Title;
        newDate = todo.TargetDate;
        newMemo = todo.Memo;
    }

    private void InitializeEdit()
    {
        newTodo = string.Empty;
        newMemo = string.Empty;
        newDate = DateTime.Today.AddDays(7);
        editingItem = null;        
    }

    private void CancelEdit()
    {
        InitializeEdit();
    }

    private void DoneEdit()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            editingItem.Title = newTodo;
            editingItem.TargetDate = newDate;
            editingItem.Memo = newMemo;
            TodoService.SaveTodo(editingItem);
            InitializeEdit();
        }
    }

    private void DoneTodo(TodoItem todo)
    {
        todo.EndDate = DateTime.Today;
        todo.IsDone = true;
        TodoService.SaveTodo(todo);
    }

    private void RemoveTodo(TodoItem todo)
    {
        todos.Remove(todo);
        TodoService.RemoveTodo(todo);
    }

    protected override void OnInitialized()
    {
        todos = TodoService.LoadTodos();
        latestId = todos.Select<TodoItem, int>(x => x.Id).DefaultIfEmpty().Max() + 1;
    }

}
