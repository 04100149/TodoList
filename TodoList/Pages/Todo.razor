@page "/todo"
@using System.Text
@using System.Text.Json
@using TodoList.Data

<PageTitle>Todo</PageTitle>

<h1>Todo 
    <span style="font-size: 0.5em;">
        <span @onclick="@(_=>showClosed=false)" style="font-weight: @(showClosed ? "normal" : "bold");">@todos.Count(todo=>!todo.IsDone) Open</span>
        <span @onclick="@(_=>showClosed=true)" style="font-weight: @(showClosed ? "bold" : "normal");">@todos.Count(todo=>todo.IsDone) Closed</span>
    </span>
</h1>

<div>
    @foreach(var todo in todos.Where<TodoItem>(x=>!x.IsDone || showClosed))
    {
    <table>
        <tr>
            <td align="right" valign="top"><span class="oi oi-key"/></td>
            <td>
                @todo.Id
                <span class="oi oi-pencil" @onclick=@(_=>EditTodo(todo)) />
                <span class="oi oi-check" @onclick=@(_=>DoneTodo(todo)) />
                <span class="oi oi-trash" @onclick=@(_=>RemoveTodo(todo)) />
            </td>
        </tr>
        <tr>
            <td align="right" valign="top"><span class="oi oi-tag"/></td>
            <td>@todo.Title</td>
        </tr>
        <tr>
            <td align="right" valign="top"><span class="oi oi-clock"/></td>
            <td>@todo.TargetDate.ToString("yyyy/MM/dd")</td>
        </tr>
        <tr>
            <td align="right" valign="top"><span class="oi oi-comment-square"/></td>
            <td >@todo.Memo</td>
        </tr>
    </table>        
    }
</div>

<div>
    <table>
        @if (editingItem != null)
        {
        <tr>
            <td align="right" valign="top">ID：</td>
            <td>@editingItem.Id</td>
        </tr>
        }
        <tr>
            <td align="right" valign="top">タイトル：</td>
            <td><input placeholder="Something todo" @bind="newTodo"/></td>
        </tr>
        <tr>
            <td align="right" valign="top">期限：</td>
            <td><input type="date" @bind="newDate"/></td>
        </tr>
        <tr>
            <td align="right" valign="top">メモ：</td>
            <td><textarea cols="30" rows="5" @bind="newMemo"/></td>
        </tr>
        <tr>
            <td colspan="2" align="right">
            @if(editingItem == null)
            {
                <button class="btn btn-primary" @onclick="AddTodo">
                    <span class="oi oi-plus" /> Add todo
                </button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="DoneEdit">
                    <span class="oi oi-check" /> Done
                </button>
                <button class="btn btn-primary" @onclick="CancelEdit">
                    <span class="oi oi-x" /> Cancel
                </button>
            }
            </td>
        </tr>
    </table>
</div>

@code {
    private List<TodoItem> todos = new();

    private bool showClosed = false;

    private int latestId = 1;
    private string? newTodo;
    private DateTime newDate = DateTime.Today.AddDays(7);
    private string newMemo;

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            TodoItem todo = new TodoItem {Id=latestId++, Title = newTodo, TargetDate = newDate, Memo=newMemo };
            newTodo = string.Empty;
            newMemo = string.Empty;
            todos.Add(todo);
            SaveTodoFile(todo);
        }
    }

    private TodoItem? editingItem = null;

    private void EditTodo(TodoItem todo)
    {
        if (todo.IsDone){ return; }
        editingItem = todo;
        newTodo = todo.Title;
        newDate = todo.TargetDate;
        newMemo = todo.Memo;
    }

    private void InitializeEdit()
    {
        newTodo = string.Empty;
        newMemo = string.Empty;
        newDate = DateTime.Today.AddDays(7);
        editingItem = null;        
    }

    private void CancelEdit()
    {
        InitializeEdit();
    }

    private void DoneEdit()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            editingItem.Title = newTodo;
            editingItem.TargetDate = newDate;
            editingItem.Memo = newMemo;
            SaveTodoFile(editingItem);
            InitializeEdit();
        }
    }

    private void DoneTodo(TodoItem todo)
    {
        todo.EndDate = DateTime.Today;
        todo.IsDone = true;
        SaveTodoFile(todo);
    }

    private void RemoveTodo(TodoItem todo)
    {
        todos.Remove(todo);
        RemoveTodoFile(todo.Id);
    }

    #region 永続化
    private const string todoFolder = @"./wwwroot/todos";

    private string GetPath(int id)
    {
        return string.Format(@"{0}/{1}.json", todoFolder, id);        
    }

    private void SaveTodoFile(TodoItem todo)
    {
        string json = JsonSerializer.Serialize(todo);
        string path = GetPath(todo.Id);
        using(StreamWriter sw = new StreamWriter(path, false, Encoding.UTF8))
        {
            sw.Write(json);
        }
    }

    private List<TodoItem> LoadTodoFiles()
    {
        List<TodoItem> todos = new List<TodoItem>();
        foreach(var path in Directory.EnumerateFiles(todoFolder))
        {
            using(StreamReader sr = new StreamReader(path, Encoding.UTF8))
            {
                string json = sr.ReadToEnd();
                TodoItem? todo = JsonSerializer.Deserialize<TodoItem>(json);
                if (todo != null)
                {
                    todos.Add(todo);
                }
            }
        }
        return todos;
    }

    private void RemoveTodoFile(int id)
    {
        string path = GetPath(id);
        try
        {
            File.Delete(path);    
        }
        catch(Exception ex)
        {
            System.Diagnostics.Trace.WriteLine(ex.Message);
        }
    }
    #endregion 永続化

    protected override void OnInitialized()
    {
        todos = LoadTodoFiles();
        latestId = todos.Select<TodoItem, int>(x => x.Id).DefaultIfEmpty().Max() + 1;
    }

}
